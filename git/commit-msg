#!/bin/sh

# check if message is valid

array=(
    'feat::A new feature'
    'fix::A bug fix'
    'docs::Documentation only changes'
    'style::Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)'
    'refactor::A code change that neither fixes a bug nor adds a feature'
    'perf::A code change that improves performance'
    'test::Adding tests or correcting existing tests'
    'build::Changes that affect the build system or external dependencies (flutter, dart, riverpod, etc..)'
    'ci::Changes to our CI configuration files and scripts'
    'localize::Translations update'
    'revert::Reverts a previous commit'
    'release::A new release'
)

types=''

RED=$'\e[31m'
GREEN=$'\e[1;32m'
BLUE=$'\e[1;34m'
YEL=$'\e[1;33m'
END=$'\e[0m'

errorPrinter() {
    printf "%s\n" "${RED}${1}${END}"
}

infoPrinter() {
    printf "%s\n" "${BLUE}${1}${END} ${GREEN}${2}${END}"
}

printTypesList() {
    printf "%s\n" "${YEL}types:${END}"

    for index in "${array[@]}" ; do
        KEY="${index%%::*}"
        VALUE="${index##*::}"
        printf "%s\n" "   ${YEL}${KEY}${END}  $VALUE."
    done
}

printScopeInfo() {
    printf "%s\n" "${YEL}scope:${END}"
    printf "   Optional, can be anything specifying the scope of the commit change."
    printf "%s\n" "   For exemple: auth, cache, sessions, etc."
}

printSubjectInfo() {
    printf "%s\n" "${YEL}subject:${END}"
    printf "%s\n" "   Brief summary of the change in present tense. Not capitalized. No period at the end."
}

printError() {
    errorPrinter 'Invalid git commit message'
    echo ''
    infoPrinter "correct format: " "<type>(<scope>): <subject>"
    infoPrinter "exemple: " "docs: Update README with instal instructions"
    echo ''
    printTypesList
    echo ''
    printScopeInfo
    echo ''
    printSubjectInfo
}

# Populate commit type regex's groups
for index in "${array[@]}" ; do
    KEY="${index%%::*}"
    # if empty
    if [ -z "$types" ]; then
        # initialize list with first key
        types="$KEY"
    else
        # append next key
        types="$types|$KEY"
    fi
done

REGEX="($types){1}(:|\([a-zA-Z0-9_]*\):){1}(.*)$";

echo $REGEX

if ! [[ $1 =~ $REGEX ]]; then
    printError
    exit 1
fi
