#!/bin/sh

################################################
# Check if message is valid                    #
################################################

array=(
    'feature::A new feature'
    'fix::A bug fix'
    'docs::Documentation only changes'
    'style::Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)'
    'refactor::A code change that neither fixes a bug nor adds a feature'
    'perf::A code change that improves performance'
    'test::Adding tests or correcting existing tests'
    'build::Changes that affect the build system or external dependencies (flutter, dart, riverpod, etc..)'
    'ci::Changes to our CI configuration files and scripts'
    'localize::Translations update'
    'revert::Reverts a previous commit'
    'release::A new release'
)

types=''

print_success() {
    # Print output in green
    printf "\e[0;32m  [✔] $1\e[0m\n"
}

print_error() {
    # Print output in red
    printf "\e[0;31m  [✖] $1 $2\e[0m\n\n"
}

print_info() {
    # Print output in blue & green
    printf "\e[1;34m  [!] $1\e[0m \e[1;32m $2\e[0m\n"
}

print_doc() {
    # Print output in yellow
    printf "\e[0;33m  [?] $1\e[0m $2\n"
}

################################################
# MAIN                                         #
################################################


# Populate commit type regex's groups
for index in "${array[@]}" ; do
    KEY="${index%%::*}"
    # if empty
    if [ -z "$types" ]; then
        # initialize list with first key
        types="$KEY"
    else
        # append next key
        types="$types|$KEY"
    fi
done

REGEX="($types){1}(:|\([a-zA-Z0-9_]*\):){1}(.){5,}$";
MESSAGE=$(cat $1)

if ! [[ $MESSAGE =~ $REGEX ]]; then
    print_error "Invalid commit message: " "$MESSAGE"

    print_info "correct format:" "<type>(<scope>): <subject>"
    print_doc "exemple:" "docs: Update README with instal instructions"

    printf "\n"

    print_doc "TYPES:"
    for index in "${array[@]}" ; do
        KEY="${index%%::*}"
        VALUE="${index##*::}"
        
        printf "\e[0;33m      $KEY:\e[0m $VALUE\n"
    done

    printf "\n"

    print_doc "SCOPE:" "Optional, can be anything specifying the scope of the commit change. (ex: Update README with instal instructions)"

    printf "\n"

    print_doc "SUBJECT:" "Brief summary of the change in present tense. Not capitalized. No period at the end."
    exit 1
else
    print_success "Valid commit message"
fi
